{"mappings":"MACA,MAQMA,EAAkBC,IACpB,MAAMC,EAAUC,SAASC,qBAAqB,IAAMH,GACpDI,MAAMC,KAAKJ,GAASK,SAASC,SACA,IAAdA,EAAOC,IAAoC,KAAdD,EAAOC,IAC/CD,EAAOE,YAZK,CAACD,IACjB,MAAME,EAASR,SAASS,cAAc,KAItC,OAHAD,EAAOE,UAAY,cACnBF,EAAOG,KAAO,IAAML,EACpBE,EAAOI,UAAY,IACZJ,CAAM,EAOUK,CAAYR,EAAOC,IAAI,GAC5C,EAIL,IAAIJ,MAAM,GAAIY,KAAK,GAAGV,SAAQ,CAACW,EAAGC,IAAMnB,EAAemB,EAAI,KCf5D,MAAMC,EAAQ,CACVC,KAASC,GACE,IAAKC,KAAKD,EAAQE,WAAYC,cAEzCC,KAASJ,IACL,MAAMK,EAAOL,EAAQE,UAAUI,MAAM,KACrC,OAAOD,EAAKA,EAAKE,OAAS,EAAE,EAEhCC,aAAiBR,IACb,MAAMQ,EAAeC,OAAOD,aACtBE,EAAU7B,SAASS,cAAc,QAEvC,IAAIqB,GAAY,EAWhB,GAVAC,OAAOC,KAAKL,GAAcvB,SAAQ6B,IAC9BH,GAAY,EAEZ,MAAMI,EAAWD,EAAO,OAClBE,EAAOR,EAAaM,GAE1BJ,EAAQO,OAAOC,EAAmBH,EAAUD,EAAME,EADrC,oBAEbN,EAAQO,OAAOpC,SAASsC,eAAe,KAAK,KAG3CR,EAAW,MAAO,SAEvB,MAAMS,EAAQvC,SAASS,cAAc,SAIrC,OAHA8B,EAAMH,OAAOpC,SAASsC,eAAe,wBACrCT,EAAQO,OAAOG,GAERV,CAAO,GAIhBQ,EAAqB,CAACH,EAAUM,EAAOC,EAASC,KAClD,MAAMC,EAAO,IAAIC,KACb,CAACH,GACD,CACIC,KAAMA,GAAQ,eAIhBG,EAAO7C,SAASS,cAAc,KAMpC,OALAoC,EAAKC,OAAS,SACdD,EAAKE,SAAWb,EAChBW,EAAKlC,KAAOqC,IAAIC,gBAAgBN,GAChCE,EAAKT,OAAOpC,SAASsC,eAAeE,IAE7BK,CAAI,EAGfd,OAAOC,KAAKf,GAAOb,SAAQ8C,IACvB,MAAMC,EAAIlC,EAAMiC,GACClD,SAASoD,iBAAiB,QAAUF,GAC5C9C,SAAQe,IACb,MAAMkC,EAAaF,EAAEhC,GACrB,GAA0B,iBAAfkC,EAGP,OAFAlC,EAAQP,UAAY,QACpBO,EAAQZ,YAAYP,SAASsC,eAAee,IAIhDlC,EAAQmC,WAAWC,aAAaF,EAAYlC,EAAQ,GACtD,G","sources":["src/autolink/autolink.js","src/control/index.js"],"sourcesContent":["/** Adapted from http://blog.parkermoore.de/2014/08/01/header-anchor-links-in-vanilla-javascript-for-github-pages-and-jekyll/ */\nconst anchorForId = (id) => {\n    const anchor = document.createElement(\"a\")\n    anchor.className = \"header-link\"\n    anchor.href = \"#\" + id\n    anchor.innerHTML = \"#\"\n    return anchor\n}\n\nconst linkifyAnchors = (level) => {\n    const headers = document.getElementsByTagName(\"h\" + level);\n    Array.from(headers).forEach((header) => {\n        if (typeof header.id === \"undefined\" || header.id === \"\") return\n        header.appendChild(anchorForId(header.id))\n    })\n}\n\n// linkify all the anchors from 1 ... 6\n(new Array(6)).fill(0).forEach((_, i) => linkifyAnchors(i + 1))","import '../global.js';\nimport './index.css';\n\nconst types = {\n    \"date\": (element) => {\n        return (new Date(element.innerText)).toISOString()\n    },\n    \"path\": (element) => {\n        const text = element.innerText.split(\"/\");\n        return text[text.length - 1];\n    },\n    \"pathbuilders\": (element) => {\n        const pathbuilders = window.pathbuilders; // read from context!\n        const wrapper = document.createElement(\"span\");\n\n        let found_one = false\n        Object.keys(pathbuilders).forEach(name => {\n            found_one = true\n\n            const filename = name + \".xml\"\n            const data = pathbuilders[name]\n            const mime = \"application/xml\"\n            wrapper.append(make_download_link(filename, name, data, mime))\n            wrapper.append(document.createTextNode(\" \"))\n        })\n\n        if (!found_one) return '(none)';\n\n        const small = document.createElement('small')\n        small.append(document.createTextNode(\"(click to download)\"))\n        wrapper.append(small)\n        \n        return wrapper\n    }\n}\n\nconst make_download_link = (filename, title, content, type) => {\n    const blob = new Blob(\n        [content],\n        {\n            type: type ?? \"text/plain\"\n        }\n    );\n\n    const link = document.createElement(\"a\")\n    link.target = \"_blank\"\n    link.download = filename\n    link.href = URL.createObjectURL(blob)\n    link.append(document.createTextNode(title))\n\n    return link\n}\n\nObject.keys(types).forEach(key => {\n    const f = types[key];\n    const elements = document.querySelectorAll(\"code.\" + key)\n    elements.forEach(element => {\n        const newElement = f(element)\n        if (typeof newElement === 'string') {\n            element.innerHTML = \"\"\n            element.appendChild(document.createTextNode(newElement))\n            return\n        }\n\n        element.parentNode.replaceChild(newElement, element)\n    })\n})"],"names":["$f0312a5caa2d901c$var$linkifyAnchors","level","headers","document","getElementsByTagName","Array","from","forEach","header","id","appendChild","anchor","createElement","className","href","innerHTML","$f0312a5caa2d901c$var$anchorForId","fill","_","i","$87b42c725c6052c6$var$types","date","element","Date","innerText","toISOString","path","text","split","length","pathbuilders","window","wrapper","found_one","Object","keys","name","filename","data","append","$87b42c725c6052c6$var$make_download_link","createTextNode","small","title","content","type","blob","Blob","link","target","download","URL","createObjectURL","key","f","querySelectorAll","newElement","parentNode","replaceChild"],"version":3,"file":"index.js.map"}